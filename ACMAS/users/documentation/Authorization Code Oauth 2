
Susan Hatfalvi - Co-project Lead of ACMAS
User Accounts
10/16/2022


As of right now, we have been following
https://django-oauth-toolkit.readthedocs.io/en/latest/getting_started.html
this tutorial for integration between Django and Oauth2

In OAuth2 Authorization Grants, it talks about the "Authorization Code" grant

this is the one that we have chosen for right now because on the website, it discusses
```The Authorization Code flow is best used in web and mobile apps.
This is the flow used for third party integration,
the user authorizes your partner to access its products in your APIs.```

and for the purposes of ACMAS, that is what is important for how people will use
ACMAS and what sorts of functionality they will want

currently, we have registered a new application, but are hitting a stopping point at this step

```
Export Client id and Client secret values as environment variable:

export ID=vW1RcAl7Mb0d5gyHNQIAcH110lWoOW2BmWJIero8
export SECRET=DZFpuNjRdt5xUEzxXovAp40bU3lQvoMvF3awEStn61RXWE0Ses4RgzHWKJKTvUCHfRkhcBi3ebsEfSjfEO96vo2Sh6pZlxJ6f7KcUbhvqMMPoVxRwv4vfdWEoWMGPeIO
(^^ not our real ID and Secret Variables)
```
as well as
```
import random
import string
import base64
import hashlib

code_verifier = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(random.randint(43, 128)))
code_verifier = base64.urlsafe_b64encode(code_verifier.encode('utf-8'))

code_challenge = hashlib.sha256(code_verifier).digest()
code_challenge = base64.urlsafe_b64encode(code_challenge).decode('utf-8').replace('=', '')
```

the code challenge variable is used in the code flow URL
this is the website to "start" the Authorization code flow

http://127.0.0.1:8000/o/authorize/?response_type=code&code_challenge=XRi41b-5yHtTojvCpXFpsLUnmGFz6xR15c3vpPANAvM&code_challenge_method=S256&client_id=vW1RcAl7Mb0d5gyHNQIAcH110lWoOW2BmWJIero8&redirect_uri=http://127.0.0.1:8000/noexist/callback

where the parameters are

Note the parameters we pass:

response_type: code
code_challenge: XRi41b-5yHtTojvCpXFpsLUnmGFz6xR15c3vpPANAvM
code_challenge_method: S256
client_id: vW1RcAl7Mb0d5gyHNQIAcH110lWoOW2BmWJIero8
redirect_uri: http://127.0.0.1:8000/noexist/callback

all of this documentation is from the Getting Started from the tutorial, and we
cannot figure out how to continue that and actually start authorization for the users
so they are able to access parts of the site independently

we have so far tried to add that code in the ACMAS\manage.py file, which results in
a failure to log in and therefore, we can't complete the authorization

we will continue to work on this, but this is the current update on the status of the
grants currently in place for the Oauth2 users in Django
